#!/bin/sh

# adapted from https://github.com/Bugswriter/tuxi
printf "\n"

###############################
#####      Constants      #####
###############################

version="Development"
LANGUAGE=""
tuxi_pid="$$"
[ ! "$XDG_CACHE_HOME" ] && XDG_CACHE_HOME="$HOME/.cache"

######################################
#####      Snippet priority      #####
######################################

# this variable determines the order the tests are started, they are processed in parallel
# the first word should be the name of the a_function() followed by a space
# you can disable tests by commenting out the line(s)
priority="
did_you_mean    # did you mean ( eg: linux torvalds ) Because we all know his real name is linux, not linus.
define          # Define ( eg: define Aggrandize )
kno_val         # Chem facts ( eg: density of silver, density of hydrogen, what is the triple point of oxygen )
math            # Math ( eg: log_2(3) * pi^e )
kno_top         # Knowledge Graph - top ( list ) ( eg: the office cast )
quotes          # Quotes ( eg: mahatma gandhi quotes )
basic           # Basic Answers ( eg: christmas day )
richcast        # Rich Rich Answers ( eg: social network cast )
lists           # Simple lists ( eg Need for Speed Heat cars list )
feat            # Featured Snippets ( eg: who is garfield )
lyrics_int      # Lyrics ( eg: gecgecgec lyrics )
lyrics_us       # Lyrics for US users, above does not work for US
weather         # Weather ( eg: weather new york )
unit            # Units Conversion ( eg: 1m into 1 cm )
currency        # Currency Conversion ( eg: 1 USD in rupee )
trans           # Translate ( eg: Vais para cascais? em ingles )
sport_fixture   # Shows last or next fixture of a sports team ( eg. Chelsea next game )
rich            # Rich Answers ( eg: elevation of mount everest )
kno_right       # Knowledge Graph - right ( eg: the office )
"

######################################
#####      Answer functions      #####
######################################

## NOTE: the order of these functions doesn't matter, priority is determined by the variable

## FUNCTION TEMPLATE
# NewAnswerName should be the word used in $priority

# # Answer description (and example)
# a_NewAnswerName() { echo "$google_html" | pup ... [ SCRAPE METHOD HERE ] ...; }

# Define (eg: define Aggrandize) //credit @igaurab
a_define() { echo "$google_html" | pup 'div.DgZBFd, div.vdBwhd, div[data-dobid="dfn"] text{}' | sed -e 's/^/* /' -e '1 s/^* //' | recode html..ISO-8859-1; }
# Chem facts ( eg: density of silver, density of hydrogen, what is the triple point of oxygen)
#"what is the " seems to be required for some things //credit @sudocanttype
a_kno_val() { echo "$google_html" | pup 'div.Z0LcW.XcVN5d text{}' | tr '\n' ' '; }
# Math ( eg: log_2(3) * pi^e ) //credit @BeyondMagic
a_math() { echo "$google_html" | pup 'span.qv3Wpe text{}' | tr -d '\n ' | recode html..ISO-8859-1; }
# Knowledge Graph - top (list) ( eg: the office cast )
a_kno_top() { echo "$google_html" | pup 'div.dAassd json{}' | jq -r '.[] | .children | .[] | .text' | sed ':a;N;$!ba;s/\n/ /g;s/null/\n/g' | sed '1s/.*/* &/;2,$s/.*/*&/;$d' | recode html..ISO-8859-1; }
# Quotes ( eg: mahatma gandhi quotes ) //credit @PoseidonCoder
a_quotes() { echo "$google_html" | pup 'div.Qynugf text{}' | recode html..ISO-8859-1; }
# Basic Answers ( eg: tuxi christmas day )
a_basic() { echo "$google_html" | pup 'div.zCubwf text{}' | tr -d '\n' | recode html..ISO-8859-1; }
# Rich Rich Answers ( eg: social network cast ) //credit @BeyondMagic
a_richcast() { echo "$google_html" | pup 'a.ct5Ked json{}' | jq -r '.[] | .title' | sed 's/^/* /' | recode html..ISO-8859-1; }
# Simple lists (eg Need for Speed Heat cars list) //credit @BeyondMagic
a_lists() { echo "$google_html" | pup 'li.TrT0Xe text{}' | sed -e 's/^ //' -e 's/^/* /' -e 's/\.$//' | recode html..ISO-8859-1; }
# Rich Answers ( eg: elevation of mount everest ) //credit @d-shaun
a_rich() {
    rich=$(echo "$google_html" | pup 'div.ujudUb, div.mR2gOd, div.XcVN5d text{}' | sed 's/^ //' | recode html..ISO-8859-1)
    [ "$rich" = 'View all' ] || printf '%b\n' "$rich"
}
# Featured Snippets ( eg: who is garfield )
a_feat() { echo "$google_html" | pup 'span.hgKElc text{}' | tr -d '\n' | recode html..ISO-8859-1 | tr ' ' '\0' | xargs -0 -n10; }
# Lyrics ( eg: gecgecgec lyrics ) //credit @d-shaun
a_lyrics_int() { echo "$google_html" | pup 'div.bbVIQb text{}' | recode html..ISO-8859-1; }
#Lyrics for US users, above does not work for US //credit @sudocanttype
a_lyrics_us() { echo "$google_html" | pup 'span[jsname="YS01Ge"] text{}' | recode html..ISO-8859-1; }
# Weather ( eg: weather new york) //credit @jhagas + @Genghius + @BeyondMagic
a_weather() {
    weather=$(echo "$google_html" | pup 'div.UQt4rd json{}' | jq -r '.. | .text?, .alt?' | sed '/null/d' | sed '$!N; /^\(.*\)\n\1$/!P; D')
    if [ -n "$weather" ]; then
        if [ $(echo "$weather" | sed -n 2p) -gt $(echo "$weather" | sed -n 3p) ]; then
            weather=$(printf '%b\n' "$weather" | sed -e 2','3'!b' -e ''2'h;'2'!H;'3'!d;x;s/^\([[:print:]'"$(printf '\001\002\003\004\005\006\007\010\011\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037\177')"']*\)\(.*\n\)\(.*\)/\3\2\1/')
        fi
        printf '%b\n' "$weather" | sed '4,5d;2s/.*/&ºC/;2,${N;s/\n/\t/;};3s/.*/&ºF/;$s/\t/\t\t/' | recode html..ISO-8859-1
    fi
}
# Units Conversion ( eg: 1m into 1 cm )
a_unit() { echo "$google_html" | pup '#NotFQb json{}' | jq -r '.[] | .children | .[0] | .value' | recode html..ISO-8859-1; }
# Currency Conversion ( eg: 1 USD in rupee )
a_currency() { echo "$google_html" | pup '.SwHCTb text{}' | sed 's/\n//g;s/\ /\0/g' | recode html..ISO-8859-1; }
# Translate ( eg: Vais para cascais? em ingles ) //credit @Genghius
a_trans() { echo "$google_html" | pup 'pre.XcVN5d json{}' | jq -r '[.[] | .children | .[] | select(.class!="BCGytf")][1] | .text' | sed 's/null//g' | recode html..ISO-8859-1; }
# Knowledge Graph - right ( eg: the office )
a_kno_right() { echo "$google_html" | pup 'div.kno-rdesc span' | sed -n '2p' | awk '{$1=$1;print}' | recode html..ISO-8859-1 | tr ' ' '\0' | xargs -0 -n10; }
# Shows last or next fixture of a sports team ( eg. Chelsea next game ) //credit @ismayilkarimli
a_sport_fixture() { echo "$google_html" | pup 'span.imso_mh__lr-dt-ds, span[jscontroller="f9W5M"], div.liveresults-sports-immersive__team-name-width span,div.imso_mh__r-tm-sc, div.imso_mh__l-tm-sc text{}' | recode html..ISO-8859-1; }

###############################
#####      Functions      #####
###############################

help_text() {
    printf "%bUsage:%b tuxi %b[options]%b %bquery%b\n" "$G" "$N" "$Y" "$N" "$M" "$N"
    printf "\n"
    printf "%bOptions:%b\n" "$G" "$N"
    printf "  -h                    Show this help message and exit.\n"
    printf "  -v                    Print Tuxi version info and exit.\n"
    printf "  -r                    Raw search results.\n"
    printf "                        (no pretty output, no colors)\n"
    printf "  -q                    Only output search results.\n"
    printf "                        (silences \"Did you mean?\", greeting, usage)\n"
    printf "  -a                    Prints all valid answers.\n"
    printf "  -t                    Pick answers to test.\n"
    printf "                        (you can specify multiple answers using tuxi_NAME in your query)\n"
    printf "\n"
    printf "%bReport bugs at%b %bhttps://github.com/Bugswriter/tuxi/issues%b\n" "$G" "$N" "$C" "$N"
}

# Checks if dependencies are installed.
check_deps() {
    while [ -n "$1" ]; do
        if [ ! "$(command -v $1)" ]; then
            error_msg "\"$1\" not found!"
            exit 2
        fi
        shift
    done
}

info_msg() {
    printf "%b>%b %s\n" "$G" "$N" "$*"
}

error_msg() {
    printf "%b%s%b\n" "$R" "$*" "$N"
}

# these are used by the processing loop to determine how and when to print info and exit
catch_signal_usr1() {
    answers_found=$(($answers_found + 1))
}
trap catch_signal_usr1 USR1
catch_signal_usr2() {
    printed=$(($printed + 1))
}
trap catch_signal_usr2 USR2

# calculates execution time and number of answers processed
debug_info() {
    timer_stop=$(date +'%s %N')
    timer_start_secs=$(echo $timer_start | cut -d ' ' -f1)
    timer_stop_secs=$(echo $timer_stop | cut -d ' ' -f1)
    timer_start_nano=$(echo $timer_start | cut -d ' ' -f2)
    timer_start_nano=$(expr $timer_start_nano + 0)
    timer_stop_nano=$(echo $timer_stop | cut -d ' ' -f2)
    timer_stop_nano=$(expr $timer_stop_nano + 0)
    timer_secs_math=$(($timer_stop_secs - $timer_start_secs))
    if [ $timer_secs_math -lt 1 ]; then
        timer_duration=$(($timer_stop_nano - $timer_start_nano))
        timer_duration=$(($timer_duration / 1000))
        if [ $timer_duration -gt 1999 ]; then
            timer_duration=$(($timer_duration / 1000))
            timer_unit='ms'
        else
            timer_unit='μs'
        fi
    elif [ $timer_secs_math -eq 1 ]; then
        timer_duration=$((1000000000 - $timer_start_nano))
        timer_duration=$(($timer_duration + $timer_stop_nano))
        timer_duration=$(($timer_duration / 1000))
        if [ $timer_duration -gt 1999 ]; then
            timer_duration=$(($timer_duration / 1000))
            timer_unit='ms'
        else
            timer_unit='μs'
        fi
    else
        timer_duration="$timer_secs_math"
        timer_unit='s'
    fi
    info_msg "$answers_found answer(s) found - post curl processing time ~$timer_duration $timer_unit"
}

# ensures > did you mean... (if applicable) is printed before any answers
dym_delay() {
    while kill -0 "$dym_pid" >/dev/null 2>&1; do [ true ]; done
}

# this calls the various snippet functions and checks for valid answers
test_answers() {
    if [ "$1" = 'did_you_mean' ]; then
        ## did you mean ( eg: linux torvalds ) Because we all know his real name is linux, not linus.
        ## silenced if quiet=true
        if ! $quiet; then
            # this needs re-working, there should be a way to do this with regular sed
            # need to figure out how to properly escape the replace string
            if [ $(command -v sd) ]; then
                if ! $raw; then
                    corrections="$(echo "$google_html" | pup 'a.gL9Hy text{}')"
                    if [ -n "$corrections" ]; then
                        err_hl="$(echo "$google_html" | pup 'a.gL9Hy > b text{}')"
                        corrections="$(echo "$corrections" | sed ':a;N;$!ba;s/\n//g' | recode html..ISO-8859-1)"
                        for errors in $(echo "$err_hl"); do
                            corrections=$(echo "$corrections" | sd -s "${errors}" "\033[1;96m${errors}\033[1;97m")
                        done
                        printf "%b>%b \033[3mI'm going to assume you meant\033[0m \033[95m--> \033[1;97m\"%b\"\033[0m\n" "$G" "$N" "$corrections"
                    fi
                else
                    did_you_mean="$(echo "$google_html" | pup 'a.gL9Hy > b text{}' | sed ':a;N;$!ba;s/\n/ /g' | recode html..ISO-8859-1)"
                    [ -n "$did_you_mean" ] && info_msg "Did you mean $did_you_mean?"
                fi
            else
                did_you_mean="$(echo "$google_html" | pup 'a.gL9Hy > b text{}' | sed ':a;N;$!ba;s/\n/ /g' | recode html..ISO-8859-1)"
                [ -n "$did_you_mean" ] && info_msg "Did you mean $did_you_mean?"
            fi
        fi
        kill -USR2 "$tuxi_pid"
    fi
    # rest of the snippets are processed here
    z="$(a_${1})"
    if [ -n "$z" ]; then
        if ! $all; then
            if mkdir "$XDG_CACHE_HOME"/tuxi.lock >/dev/null 2>&1; then
                kill -USR1 "$tuxi_pid"
                if $debug; then
                    dym_delay
                    info_msg "Answer selected: $1"
                fi
                output "$z"
            fi
        else
            kill -USR1 "$tuxi_pid"
            output "$z"
        fi
    fi
}

# this file should only need removing if tuxi crashes or is ^C before finishing
# ideally this should be a lock that doesn't have to access storage
if [ -d "$XDG_CACHE_HOME"/tuxi.lock ]; then
    error_msg "Tuxi lock file found (now removing) - Did it crash last run?"
    printf "\n"
    rmdir "$XDG_CACHE_HOME"/tuxi.lock
fi

######################################
#####      Dependency check      #####
######################################

# pup : https://github.com/ericchiang/pup
# recode : https://github.com/rrthomas/recode
# jq : https://github.com/stedolan/jq
check_deps "pup" "recode" "jq"

##############################
#####      Defaults      #####
##############################

# system language fallback
LANG=$(echo $LANG | sed 's/\..*//')

# color codes
N="\033[0m"    # Reset
R="\033[1;31m" # Red
G="\033[1;32m" # Green
Y="\033[1;33m" # Yellow
M="\033[1;35m" # Magenta
C="\033[1;36m" # Cyan

# options
raw=false
quiet=false
all=false
pick_search=false
debug=false
save_html=false

# search result output format (changes if raw=true)
output() {
    dym_delay
    printf "%b---%b\n%s\n%b---%b\n" "$G" "$N" "$*" "$G" "$N"
    $all || kill -USR2 "$tuxi_pid"
}

#############################
#####      Getopts      #####
#############################

# -h : help
# -v : version info
# -r : raw search result
# -q : silences greeting and did you mean
# -a : print all answers
# -t : specify answer type
# -d : print debug info
# -s : save google HTML response
while getopts "hvrqatds" OPT; do
    case "$OPT" in
    h)
        help_text
        exit 0
        ;;
    v)
        printf "tuxi %s\n" "$version"
        exit 0
        ;;
    r)
        raw=true
        ;;
    q)
        quiet=true
        ;;
    a)
        all=true
        ;;
    t)
        pick_search=true
        ;;
    d)
        debug=true
        ;;
    s)
        save_html=true
        ;;
    *)
        help_text | head -n 1
        exit 1
        ;;
    esac
done
# shifts to query
shift $((OPTIND - 1))

####################################
#####      Raw formatting      #####
####################################

# If raw=true: No colors, No pretty output
if $raw; then
    N=""
    R=""
    G=""
    Y=""
    M=""
    C=""

    output() {
        dym_delay
        printf "%s\n" "$*"
        $all || kill -USR2 "$tuxi_pid"
    }
fi

#################################
#####      Query check      #####
#################################

# If query is empty: exit
# If quiet=false: Prints greeting and usage
if [ -z "$1" ]; then
    if ! $quiet; then
        printf "Hi, I'm Tuxi. Ask me anything!\n"
        help_text | head -n 1
    fi
    exit 0
fi

# Else, all arguments are saved in $query
query="$*"

####################################
#####      Custom answers      #####
####################################

# this is ran if the -t flag is passed, it first clears the list of snippets to check
# (saving the original list to print out if a mistake is made) then loops through the query
# looking for tuxi_ and updates the priority variable to use only those snippets
if $pick_search; then
    list_priority="$priority"
    snippet_check=$(echo "$list_priority" | cut -d ' ' -f1 | sed -e '/^\s*#.*$/d' -e '/^\s*$/d')
    matched=false
    priority="did_you_mean"
    query="$(echo "$query" | sed 's/ /\\n/g')"
    for pick_words in $(echo "$query" | grep 'tuxi_' | sed 's/tuxi_//g'); do
        for check_pick_words in $(echo "$snippet_check"); do
            [ "$check_pick_words" = "$pick_words" ] && priority="$(printf '%b\n%s\n' "$priority" "$pick_words")" && matched=true
        done
        if ! $matched; then
            printf "Sorry but %s is not a valid search type\nPlease retry your search using one of the following: tuxi_\n" "$pick_words"
            printf "%b\n" "$(echo "$list_priority" | sed /did_you_mean/d)"
            printf "\n"
            printf "If %s is on that list could you please file a bug report, thanks! (and sorry)\n" "$pick_words"
            exit 1
        fi
    done
    query="$(printf '%b\n' "$query" | grep -v "tuxi_" | sed 's/\\n/ /g')"
fi

########################################
#####      Snippet extraction      #####
########################################

user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0"
google_url="https://www.google.com/search?hl="${LANGUAGE:="${LANG:=en_US}"}""

# Response from Google via cURL (-G: get, -s: silent)
google_html=$(curl -Gs --compressed "$google_url" --user-agent "$user_agent" --data-urlencode "q=$query")
[ -z "$google_html" ] && error_msg "No valid response from google!" && exit 1

# save search results for debugging
if $save_html; then
    [ -d "$XDG_CACHE_HOME"/tuxi ] || mkdir -p "$XDG_CACHE_HOME/tuxi"
    file_name="tuxi-$(date +%s)-$(printf %s "$query" | sed 's/ /_/g').html"
    html_location="$XDG_CACHE_HOME/tuxi/$file_name"
    printf "%s" "$google_html" >$html_location
    info_msg "HTML for \"$query\" -> $html_location"
fi

# start timer for debug_info after receiving results from google
$debug && timer_start=$(date +'%s %N')

################################
#####      Processing      #####
################################

# launches all the snippet functions and saves the pids for later
pids=""
answers_found=0
printed=0
priority=$(echo "$priority" | cut -d ' ' -f1 | sed -e '/^\s*#.*$/d' -e '/^\s*$/d')
for tests in $(echo "$priority"); do
    test_answers "$tests" 2>/dev/null &
    if [ -z "$pids" ]; then
        pids="$!"
        dym_pid="$pids"
    else
        pids="${pids}\n${!}"
    fi
done

# loops to spin wheels until an answer has been printed
# if all the launched processes exit without an answer being printed
# script exits with a "No Result!" message
laps=0
while [ $answers_found -eq 0 ]; do
    for waiting1 in $(printf "%b\n" "$pids"); do
        kill -0 "$waiting1" >/dev/null 2>&1
        [ $? -eq 0 ] && break
        for waiting2 in $(printf "%b\n" "$pids"); do
            kill -0 "$waiting2" >/dev/null 2>&1
            [ $? -eq 0 ] && break 2
        done
        laps=$(($laps + 1))
        [ $laps -lt 2 ] && break
        error_msg "No Result!"
        $debug && debug_info
        exit 1
    done
done

# once an answer has been printed and the -a flag isn't active
# kills all remaining child processes, clears the lock and exits
# if -a flag is active then it waits until every answer has been printed first
if ! $all; then
    until [ $printed -eq 2 ]; do [ true ]; done
    printf "%b\n" "$pids" | xargs -P0 -I{} sh -c 'kill -9 {} >/dev/null 2>&1' >/dev/null 2>&1
fi
wait
dym_delay
$debug && debug_info
[ -d "$XDG_CACHE_HOME"/tuxi.lock ] && rmdir "$XDG_CACHE_HOME"/tuxi.lock
exit
