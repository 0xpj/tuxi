#!/usr/bin/env sh

help_text() {
    printf "%bUsage:%b tuxi %b<your question>%b\n\ttuxi %b<OPTIONS>%b %b<your question>%b\n\n" "$G" "$N" "$M" "$N" "$C" "$N" "$M" "$N"
    printf "%bOPTIONS:%b\n-r, --raw\tSimplify Tuxi output. Useful for e.g notify-send.\n-h, --help\tDisplays this help message.\n" "$G" "$N"
    printf "\n%bReport bugs to%b https://github.com/Bugswriter/tuxi\n" "$G" "$N"
}

# Checks if dependencies are installed.
check_dep() {
    while [ -n "$1" ]; do
        if [ ! "$(command -v $1)" ]; then
            error_msg "\"$1\" not found!"
            exit 1
        fi
        shift
    done
}

# dependency check
check_dep pup recode jq

# Colour codes
N="\033[0m"    # Reset
R="\033[1;31m" # Red
G="\033[1;32m" # Green
M="\033[1;35m" # Magenta
C="\033[1;36m" # Cyan

# Argument parsing
case $1 in
    -r|--raw)
        [ -z "$2" ] && echo "Please add query!" && exit 1
        query="$(printf "%s" "$*" | cut -f 2- -d ' ')"
	# Raw formatting functions
        info_msg() { echo "> $*"; }
        error_msg() { echo "$*"; }
        output() { echo "$*"; }
    ;;
    -h|--help)
        help_text
        exit 0
    ;;
    -*)
        printf "%bUnknown option%b \"$1\"\n" "$R" "$N"
        exit 1
    ;;
    *)
        query="$*"
	# Normal formatting functions
        info_msg() { printf "%b>%b %s\n"  "$G" "$N" "$*"; }
        error_msg() { printf "%b%s%b\n"  "$R" "$*" "$N"; }
        output() { printf "%b---%b\n%s\n%b---%b\n"  "$G" "$N" "$*" "$G" "$N"; }
    ;;
esac


[ $# -le 0 ] && echo "Hi, I am Tuxi.. Ask me something" && help_text | head -n1 && exit $?

user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0"
google_url="https://www.google.com/search?hl=en_US"

google_html=$(curl -Gs --compressed "$google_url" --user-agent "$user_agent" --data-urlencode "q=$query")

did_you_mean="$(echo "$google_html" | pup 'a.gL9Hy > b text{}' | sed ':a;N;$!ba;s/\n/ /g' | recode html..ISO-8859-1)"
[ -n "$did_you_mean" ] && info_msg "Did you mean $did_you_mean?"

math="$(echo "$google_html" | pup 'span.qv3Wpe text{}' | tr -d '\n ' | recode html..ISO-8859-1)"
[ -n "$math" ] && output "$math" && exit 0

kno_top=$(echo "$google_html" | pup 'div.dAassd json{}'  | jq -r '.[] | .children | .[] | .text' | sed ':a;N;$!ba;s/\n/ /g' | sed 's/null/\n/g' | awk '{$1=$1;print "* " $0}' | sed '/^* $/d'| recode html..ISO-8859-1)
[ -n "$list" ] && output "$kno_top" && exit 0

res1="$(echo "$google_html" | pup 'div.zCubwf text{}' | tr -d '\n' | recode html..ISO-8859-1)"
[ -n "$res1" ] && output "$res1" && exit 0

rich=$(echo "$google_html" | pup 'div.XcVN5d text{}' | recode html..ISO-8859-1)
[ -n "$rich" ] && output "$rich" && exit 0

feat="$(echo "$google_html" | pup 'span.hgKElc text{}' | tr -d '\n' | recode html..ISO-8859-1 | tr ' ' '\0' | xargs -0 -n10)"
[ -n "$feat" ] && output "a$feat" && exit 0

lyrics="$(echo "$google_html" | pup 'div.bbVIQb text{}' | recode html..ISO-8859-1)"
[ -n "$lyrics" ] && output "$lyrics" && exit 0

kno_right="$(echo "$google_html" | pup 'div.kno-rdesc span' | sed -n '2p' | awk '{$1=$1;print}' | recode html..ISO-8859-1 | tr ' ' '\0' | xargs -0 -n10)"
[ -n "$kno_right" ] && output "$kno_right" && exit 0

error_msg "No Result!" && exit 1
